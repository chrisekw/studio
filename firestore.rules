
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the requesting user is an admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Rules for user profiles
    match /users/{userId} {
      // Admins can read/write any profile. Users can read/write their own profile.
      allow read, write: if request.auth != null && (request.auth.uid == userId || isAdmin());
    }

    // Rules for the mail collection
    match /mail/{docId} {
      // Only admins can create (queue) emails
      allow create: if isAdmin();
      // No one can read, update, or delete queued emails from the client-side
      allow read, update, delete: if false;
    }
    
    // Rules for a user's saved leads subcollection
    match /users/{userId}/savedLeads/{leadId} {
      // Users can only manage their own saved leads
      allow read, write, delete: if request.auth != null && request.auth.uid == userId;
    }

    // Rules for the platform-wide events log
    match /events/{eventId} {
      // Only admins can read the event log
      allow read: if isAdmin();
      // Events are created by a server-side process (the Genkit flow), so client-side writes are allowed
      // for authenticated users, but this will be locked down further with server-side checks.
      allow write: if request.auth != null;
    }
  }
}
